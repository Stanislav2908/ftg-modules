from .. import loader, utils
def register(cb):
    cb(spamallV2Mod())
class spamallV2Mod(loader.Module):
    """–°–ø–∞–º–∏–º –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º"""
    strings = {'name': 'SpamAllV2'}
    async def spamallcmd(self, message):
        '''–∑–∞–ø—É—Å–∫ —Å–ø–∞–º—á–∏–∫–∞'''
        await utils.answer(message, "—Å–ø–∞–º–∏–º –≤ —á–∞—Ç—ã...")
        args = utils.get_args_raw(message) 
        —Ñ = 0
        –Ω = 0
        –ø–æ–ª—É—á–∏–ª–æ—Å—å = ""
        –Ω–µ–ø–æ–ª—É—á–∏–ª–æ—Å—å = ""
        if not args: 
            return await utils.answer(message, "<b>–≠—Ç—É –∫–æ–º–∞–Ω–¥—É —é–∑–Ω–∏ –≤ —á–∞—Ç–µ, –î–∞—É–Ω.</b>") 
        async for i in message.client.iter_dialogs():
            title = i.name
            if not title:
                title = "–ó–æ–º–±–∏ üßü"
            try:
                await message.client.send_message(i.id, args)
                —Ñ = —Ñ+1
                –ø–æ–ª—É—á–∏–ª–æ—Å—å += "\n"+title
            except Exception as e:
                –Ω = –Ω+1
                –Ω–µ–ø–æ–ª—É—á–∏–ª–æ—Å—å += "\n"+title
        return await utils.answer(message, "<b>–ó–∞–∫–æ–Ω—á–∏–ª —Å–ø–∞–º–∏—Ç—å –≤ —á–∞—Ç—ã!</b>\n<b>–ü–æ–ª—É—á–∏–ª–æ—Å—å:</b> <code>"+–ø–æ–ª—É—á–∏–ª–æ—Å—å+"\n\n"+str(—Ñ)+" —á–∞—Ç–æ–≤</code>\n<b>–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å:</b> <code>"+–Ω–µ–ø–æ–ª—É—á–∏–ª–æ—Å—å+"\n\n"+str(–Ω)+" —á–∞—Ç–æ–≤</code>")